<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_TCPCameraServer" Id="{bd823736-597a-4307-b858-aa0626c8dd73}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TCPCameraServer
VAR_INPUT
	sLocalHost: T_IPv4Addr;
	nLocalPort: UDINT;
	tPoolTime: Time;
	bStartCommunication : BOOL;
	diWriteData: UDINT;
END_VAR
VAR_OUTPUT
	bConnected: BOOL;
	udiReceivedData: UDINT;
	bBusy: BOOL;	
	bError: BOOL;
	nErrorID: UDINT;
END_VAR
VAR
	iState: eTcpStateMachine;
	hListener: T_HSOCKET;
	hSocket: T_HSOCKET;
	fbSocketAccept: FB_SocketAccept;
	fbSocketListen: FB_SocketListen;
	fbSocketReceive: FB_SocketReceive;
	fbSocketClose: FB_SocketClose;
	fbSocketCloseAll: FB_SocketCloseAll;
	fbSocketSend: FB_SocketSend;
	bAcceptExecute: BOOL;
	bSendTrigger: BOOL;
	fbPoolTmr: TON;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iState OF

	eTcpStateMachine.INIT: 											// SM: Init State, reinitialize FBs
	
		IF bStartCommunication = TRUE THEN							// If communication was started
			fbSocketListen(bExecute := FALSE);						// Reinitialize	socket listener FB
			fbSocketAccept(bExecute := FALSE);						// Reinitialize	remote client connection acceptance FB
			fbSocketCloseAll(bExecute := FALSE);					// Reinitialize	close all the sockets FB
			fbSocketClose(bExecute:= FALSE);						// Reinitialize	socket close FB
			bBusy := TRUE;				
			iState := eTcpStateMachine.OPEN_SOCKET_LISTENER;		// Activate OPEN_SOCKET_LISTENER
		ELSE
			bBusy := FALSE;
		END_IF
	
		
	eTcpStateMachine.OPEN_SOCKET_LISTENER:							// SM: Open socket listener
	
		fbSocketListen(sSrvNetId:= '', 								// NetID for local server
					   sLocalHost:= sLocalHost, 					// Local IP address
					   nLocalPort:= nLocalPort, 					// Local Port number
					   bExecute:= TRUE, 
					   tTimeout:= T#4S, 
					   bBusy=> , 
					   bError=> bError, 
					   nErrId=> nErrorID,
					   hListener=> hListener);						// Handle to send and receive data from socket
		
		IF hListener.handle <> 0 THEN								// If socket was opened succsessfully
			iState :=eTcpStateMachine.ACCEPT_CLIENT_CONNECTION;		// Activate ACCEPT_CLIENT_CONNECTION step
		ELSIF bError THEN
			iState := eTcpStateMachine.ERROR_HANDLING;				// Activate ERROR_HANDLING
		END_IF
	
		
	eTcpStateMachine.ACCEPT_CLIENT_CONNECTION: 						// Accept remote client connection
	
		fbSocketAccept(sSrvNetId:= '', 		
					   hListener:= hListener, 				    	// Handle from socket listener
					   bExecute:= TRUE, 
					   tTimeout:= T#4S, 
					   bAccepted=> , 
					   bBusy=> , 
					   bError=> bError, 
				       nErrId=> nErrorID,
					   hSocket=> hSocket);							// Connection handle
		
		IF NOT fbSocketAccept.bBusy THEN
			fbSocketAccept(bExecute:= FALSE);
		END_IF

		IF hSocket.handle <> 0 THEN									// Client connection was accepted
			iState := eTcpStateMachine.SEND_DATA;					// Activate SEND_DATA
			bConnected := TRUE;										// Change "Connected" status
		ELSIF bError THEN									
			iState := eTcpStateMachine.ERROR_HANDLING; 				// Activate ERROR_HANDLING
		END_IF


	eTcpStateMachine.SEND_DATA: 									// SM: Send Data
	
		fbPoolTmr(IN:= NOT fbPoolTmr.Q, 							// Pool tmr to send data
				  PT:= tPoolTime, 
				  Q=> , 
				  ET=> );	
				  
		fbSocketSend(sSrvNetId:= '', 								// Send data to client with pool period
					 hSocket:= hSocket, 							// Handle from socket accept
					 cbLen:= SIZEOF(diWriteData), 
					 pSrc:= ADR(diWriteData),
					 bExecute:= fbPoolTmr.Q, 
					 tTimeout:= T#3S, 
					 bBusy=> , 
					 bError=> bError, 
					 nErrId=> nErrorID);		
	
		IF NOT fbSocketSend.bBusy THEN						   		// Switch back to receiving state after sending
			iState := eTcpStateMachine.RECEIVE_DATA;		   		// Close connection in case of error 
		END_IF		
	
		
	eTcpStateMachine.RECEIVE_DATA: 									// SM: Receive Data

		fbSocketReceive(sSrvNetId:= '', 							// Check cyclically for new data from client
						hSocket:= hSocket, 							// Handle from socket accept
						cbLen:= SIZEOF(udiReceivedData), 
						pDest:= ADR(udiReceivedData), 
						bExecute:= TRUE, 														
						tTimeout:= T#4S, 
						bBusy=> , 
						bError=> bError, 
						nErrId=> nErrorID,
						nRecBytes=> );
		
		IF NOT fbSocketReceive.bBusy THEN							// If the data was received successfully
			fbSocketReceive(bExecute := FALSE);						
			iState := eTcpStateMachine.SEND_DATA;					// Activate SEND_DATA
		END_IF
		IF fbSocketReceive.bError OR(NOT bStartCommunication) THEN  // Close connection when error is occuring or trigger is set
			iState := eTcpStateMachine.ERROR_HANDLING;				// Activate ERROR_HANDLING
		END_IF


	eTcpStateMachine.ERROR_HANDLING:								// SM: Error Handling	

		fbSocketClose(sSrvNetId:= '', 								// Close socket listener
					  hSocket:= hListener, 
					  bExecute:= TRUE, 
					  tTimeout:= T#4S, 
					  bBusy=> , 
					  bError=> bError, 
					  nErrId=> nErrorID);		

		fbSocketClose(sSrvNetId:= '', 								// Close socket client connection
					  hSocket:= hSocket, 
					  bExecute:= TRUE, 
					  tTimeout:= T#4S, 
					  bBusy=> , 
					  bError=> bError, 
					  nErrId=> nErrorID);
					  
		IF NOT (fbSocketClose.bBusy) OR fbSocketClose.bError THEN   // If socket is closed
			hSocket.handle := 0;	
			iState := eTcpStateMachine.INIT;						// Activate INIT
			bConnected := FALSE;
		END_IF
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_TCPCameraServer">
      <LineId Id="999" Count="66" />
      <LineId Id="1067" Count="34" />
      <LineId Id="1103" Count="3" />
      <LineId Id="1108" Count="5" />
      <LineId Id="1121" Count="1" />
      <LineId Id="1124" Count="5" />
      <LineId Id="1152" Count="0" />
      <LineId Id="1130" Count="4" />
      <LineId Id="1151" Count="0" />
      <LineId Id="256" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>